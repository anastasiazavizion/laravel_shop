<?php

namespace Tests\Unit\Services;


use App\Services\Contracts\FileServiceContract;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class FileServiceTest extends TestCase
{
    protected FileServiceContract $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->service = app(FileServiceContract::class);

        Storage::fake('public');

    }

    /**
     * A basic unit test example.
     */
    public function test_file_upload(): void
    {
        $file = UploadedFile::fake()->image('image.png');
        $uploadedFile = $this->service->upload($file);
        $this->assertTrue(Storage::has($uploadedFile));
        $this->assertEquals(Storage::getVisibility($uploadedFile), 'public');
    }

    public function test_remove_file()
    {
        $file = UploadedFile::fake()->image('image.png');
        $uploadedFile = $this->service->upload($file);
        $this->assertTrue(Storage::has($uploadedFile));
        $this->service->remove($uploadedFile);
        $this->assertFalse(Storage::has($uploadedFile));
    }

    public function test_it_returns_the_same_path_for_string_file()
    {
        $fileName = 'test.png';
        $newFileName = $this->service->upload($fileName);
        $this->assertEquals($fileName,$newFileName);
    }
}
